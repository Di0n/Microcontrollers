
/*
 * SecuritySystem.c
 *
 * Created: 13-3-2019 11:03:19
 * Author : Dion van der Linden
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h>
#include <stdio.h>
#include "../header/utils.h"
#include "../header/lcd.h"

#define PULSE_OUT 0
#define PULSE_IN 1
// Pulse out = 0
// Pulse in = 1
void write(int val);

volatile int pulse = 0;
volatile int done = 0;
volatile float dist1 = 0;

enum {IDLE, SEND, RECV};
volatile uint8_t flag = IDLE;
volatile uint16_t timeCount = 0, dist = 0;


//ISR(INT0_vect)
//{
	//static int i = 0;
	//if (i == 1)
	//{
		//TCCR1B = 0;
		//pulse = TCNT1;
		//TCNT1 = 0;
		//i = 0;
	//}
	//if (i == 0)
	//{
		//TCCR1B |= 1 << CS10;
		//i = 1;
	//}
//}

int main(void)
{
	// 0 = input 1 = output
	DDRA = 0b00000101;//0x65; // 0b00000101
    /* Replace with your application code */
	
	//EICRA |= 0b00000011;
	//EIMSK |= 0b00000001;
	
	//sei();

	
	LCD_Init();
	
	TCCR0 = 0x02; // 1/8 prescaler
	TCNT0 = 0x100 - 20;
	TIMSK = 0x01;
	EICRA = 0x0c;
	EIMSK = 0x02;
	EIFR = 0x02;
		
	sei();
    while (1) 
    {
		flag = SEND;
		write(1);
		Utils_Wait(15);
		write(0);
		LCD_ClearDisplay();
		LCD_SetCursorPos(0x00);
		LCD_WriteString("Starting");
		while (flag != IDLE) Utils_Wait(1);
		LCD_ClearDisplay();
		LCD_SetCursorPos(0x00);
		char str[10];
		sprintf(str, "%g", dist1);
		LCD_WriteString(str);
		/*pulse = PORTA1;
		int count = pulse / 58;
		LCD_ClearDisplay();
		LCD_SetCursorPos(0x00);
		
		char str[8];
		itoa(count, str, 8);
		LCD_WriteString(str);*/
		Utils_Wait(1000);
		//Utils_Wait(10);
    }

	return 0;
}

void write(int toggle)
{
	if (toggle == 1)
		PORTA |= (1<<PULSE_OUT);
	else if (toggle == 0)
		PORTA &= ~(1<<PULSE_OUT);
}

SIGNAL(TIMER0_OVF_vect)
{
	cli();
	
	TCNT0 = 0x100 - 20;
	
	if (flag == RECV)
	{
		timeCount++;
	}
	else
		timeCount = 0;
	sei();
}

SIGNAL(INT1_vect)
{
	cli();
	
	if (flag == SEND)
	{
		EICRA = 0x08;
		flag = RECV;
	}
	else if (flag == RECV)
	{
		EICRA = 0x0C;
		dist = timeCount * 0.17;
		dist1 = dist * 100 * 0.17;
		
		flag = IDLE;
	}
	
	sei();	
}
